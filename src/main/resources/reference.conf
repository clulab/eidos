EidosSystem {
// Override the default values here
             language = english
      masterRulesPath = /org/clulab/wm/eidos/english/grammars/master.yml
         taxonomyPath = /org/clulab/wm/eidos/english/grammars/taxonomy.yml
          hedgingPath = /org/clulab/wm/eidos/english/confidence/hedging.txt
          useLexicons = true
        entityFinders = ["gazetteer", "rulebased"]
 keepStatefulConcepts = false
            cacheDir = ./cache
      conceptExpander {
        expansionType = "textbound"
        maxHops = 5
        invalidOutgoing = [
          "acl:relcl",
          "advcl_to",
          "^advcl_because",
          "^case",
          "^conj",
          "^cop",
          "^cc$",
          "^nmod_as",
          "^nmod_because",
          "^nmod_due_to",
          "^nmod_except",
          "^nmod_given",
          "^nmod_since",
          "^nmod_without$",
          "^punct",
          "^ref$"
        ]
        invalidIncoming = []
        validOutgoing = [
          ".+"
        ]
        validIncoming = [
          "^amod$",
          "^compound$",
          "^nmod_of"
        ]
      }
}

filtering {
  stopWordsPath = /org/clulab/wm/eidos/english/filtering/stops.txt
  transparentPath = /org/clulab/wm/eidos/english/filtering/transparent.txt
}

actions {
  useCoref = true
  corefType = "causalBasic"
  taxonomyPath = ${EidosSystem.taxonomyPath}
  useExpansion = true
  expander {
    expansionType = "argument"
    maxHops = 5
    validArguments = ["cause", "effect", "group"]
    validLabels = ["Causal", "Correlation", "Coreference", "HumanMigration"]
    // avoid expanding along these dependencies
    invalidOutgoing = [
        "acl:relcl",
        "advcl_to",
        "^advcl_because",
        "^case",
        "^conj",
        "^cop",
        "^cc$",
        "^nmod_as",
        "^nmod_because",
        "^nmod_due_to",
        "^nmod_except",
        "^nmod_given",
        "^nmod_since",
        "^nmod_without$",
        "^punct",
        "^ref$",
//      // Added to adjust entity expansion
        "nmod:npmod",
        //"nmod:poss",
        "nmod:tmod",
        "nmod_according_to",
        "nmod_after",
        "nmod_against",
        "nmod_agent",
        "nmod_ago",
        "nmod_along_with",
        "nmod_alongside",
        "nmod_amid",
        "nmod_amidst",
        "nmod_among",
        "nmod_amongst",
        "nmod_apart_from",
        "nmod_as_for",
        "nmod_as_of",
        "nmod_as_per",
        "nmod_as_to",
        "nmod_away_from",
        "nmod_based",
        "nmod_because_of",
        "nmod_before",
        "nmod_beneath",
        "nmod_besides",
        "nmod_between",
        "nmod_beyond",
        "nmod_compared_to",
        "nmod_compared_with",
        "nmod_concerning",
        "nmod_despite",
        "nmod_due",
        "nmod_due_to",
        "nmod_during",
        "nmod_endorsed",
        "nmod_except",
        "nmod_except_for",
        "nmod_excluding",
        "nmod_following",
//        "nmod_from",
        "nmod_given",
        "nmod_higher",
        "nmod_household",
        "nmod_if",
        "nmod_in_accordance_with",
        "nmod_in_addition_to",
        "nmod_in_case_of",
        "nmod_in_order",
        "nmod_in_spite_of",
        "nmod_instead_of",
        "nmod_large",
        "nmod_more_than",
        "nmod_nearer",
        "nmod_notwithstanding",
        "nmod_off",
        "nmod_on_account_of",
        "nmod_on_behalf_of",
        "nmod_out",
        "nmod_out_of",
        "nmod_outcome",
        "nmod_outside_of",
        "nmod_past",
        "nmod_per",
        "nmod_rather_than",
        "nmod_since",
        "nmod_such_as",
        "nmod_than",
        "nmod_throughout",
        "nmod_throught",
        "nmod_together_with",
        "nmod_toward",
        "nmod_towards",
        "nmod_unlike",
        "nmod_unrelated",
        "nmod_until",
        "nmod_up",
        "nmod_v.",
        "nmod_via",
        "nmod_vs.",
        "nmod_with_regard_to",
        "nmod_with_respect_to",
        "nmod_without",
        "nmod_worsen",
    ]
    invalidIncoming = [
//      "^nmod_with$",
//      "^nmod_without$",
//      "^nmod_except$",
//      "^nmod_despite$"
    ]
    validOutgoing = [
//       "^amod$",
//       "^advmod$".r,
//       "^dobj$",
//       "^compound", // replaces nn
//       "^name", // this is equivalent to compound when NPs are tagged as named entities, otherwise unpopulated
//       // ex.  "isotonic fluids may reduce the risk" -> "isotonic fluids may reduce the risk associated with X.
//       "^acl_to",
//       "xcomp",
//       "^nmod",
//       //    "case"
//       "^ccomp"
      ".+"
    ]
    validIncoming = [
      "^amod$",
      "^compound$",
      "^nmod_of"
    ]
  }
}

apps {
  inputDirectory = "."
  outputDirectory = "."
  inputFileExtension = ".txt"
  exportAs = ["serialized", "jsonld", "mitre"] // valid modes: jsonld, mitre, serialized
  groundTopN = 5
  ontologymapper {
    outfile = src/main/resources/org/clulab/wm/eidos/${EidosSystem.language}/ontologies/un_to_indicators.tsv
  }
}

ontologies {
  useW2V = false
  wordToVecPath = /org/clulab/wm/eidos/english/w2v/vectors.txt
  //      wordToVecPath = /org/clulab/wm/eidos/english/w2v/glove.840B.300d.txt
  topKNodeGroundings = 10
  cacheDir = ${EidosSystem.cacheDir}/english
  useCache = false

  ontologies = ["un", "wdi", "fao", "props", "mitre12", "who", "interventions"] // , "icasa", "mesh"]
  // Paths to the ontologies
  // Primary
  un            = /org/clulab/wm/eidos/english/ontologies/un_ontology.yml
  props         = /org/clulab/wm/eidos/english/ontologies/un_properties.yml
  // Plugins
  interventions = /org/clulab/wm/eidos/english/ontologies/interventions.yml
  // Indicators
  wdi           = /org/clulab/wm/eidos/english/ontologies/wdi_ontology.yml
  fao           = /org/clulab/wm/eidos/english/ontologies/fao_variable_ontology.yml
  mitre12       = /org/clulab/wm/eidos/english/ontologies/mitre12_indicators.yml
  who           = /org/clulab/wm/eidos/english/ontologies/who_ontology.yml
  // Variables
  icasa         = /org/clulab/wm/eidos/english/ontologies/icasa.yml
  // Other
  mesh          = /org/clulab/wm/eidos/english/ontologies/mesh_ontology.yml
}


ruleBasedEntityFinder {
  entityRulesPath = /org/clulab/wm/eidos/english/grammars/entities/grammar/entities.yml
  avoidRulesPath = /org/clulab/wm/eidos/english/grammars/avoidLocal.yml

//  expander {
//    expansionType = "textbound"
//    maxHops = 15
//  }
}

geoparser {
  geoNormModelPath = /org/clulab/geonorm/model/geonorm_model.dl4j.zip
   geoWord2IdxPath = /org/clulab/wm/eidos/english/context/word2idx_file.txt
     geoLoc2IdPath = /org/clulab/wm/eidos/english/context/geo_dict_with_population_SOUTH_SUDAN.txt
}

gazetteers {
  quantifierPath =  org/clulab/wm/eidos/english/lexicons/Quantifier.tsv
  locationsPath = org/clulab/wm/eidos/english/lexicons/Location.tsv
  propertiesPath =  org/clulab/wm/eidos/english/lexicons/Property.tsv
  locationsPath =  org/clulab/wm/eidos/english/lexicons/Location.tsv
  lexicons = [${gazetteers.quantifierPath}, ${gazetteers.propertiesPath}, ${gazetteers.locationsPath}]
//  expander {
//    expansionType = "textbound"
//  }
}

adjectiveGrounder {
  domainParamKBPath = /org/clulab/wm/eidos/english/quantifierKB/domain_parameters.kb
   quantifierKBPath = /org/clulab/wm/eidos/english/quantifierKB/gradable_adj_fullmodel.kb
}
