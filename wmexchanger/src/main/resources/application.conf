rest {
  consumer {
    documentService: "https://localhost/dart/api/v1/cdrs"
    documentService: ${?REST_CONSUMER_DOCUMENT_SERVICE}
    annotations: false
    ontologyService: "https://localhost/dart/api/v1/ontologies"
    ontologyService: ${?REST_CONSUMER_ONTOLOGY_SERVICE}
    username: ${?REST_CONSUMER_USERNAME}
    password: ${?REST_CONSUMER_PASSWORD}

    interactive: true
    duration {
      wait: 20000
      pause: 5000
    }
  }
  producer {
    service: "https://localhost/dart/api/v1/readers/upload"
    service: ${?REST_PRODUCER_SERVICE}
    username: ${?REST_PRODUCER_USERNAME}
    password: ${?REST_PRODUCER_PASSWORD}
    // Do not include default values for these so that they must be specified elsewhere.
    // Otherwise, they get forgotten and the unhelpful default values get used.
    eidosVersion: ${EIDOS_VERSION}
    ontologyVersion: ${ONTOLOGY_VERSION}

    interactive: true
    duration {
      wait: 20000
      pause: 10000
    }
  }
}

curl {
  producer {
    service: "https://localhost/dart/api/v1/wm-readers/reader/upload"
    service: ${?CURL_PRODUCER_SERVICE}
    username: ${?CURL_PRODUCER_USERNAME}
    password: ${?CURL_PRODUCER_PASSWORD}
    eidosVersion: ${EIDOS_VERSION}
    ontologyVersion: ${ONTOLOGY_VERSION}
  }
}

eidos {
  interactive: true
  duration {
    wait: 20000
    pause: 50000
  }
}

kafka {
  app {
    # Put these two values into the command line.
    topic: ${?KAFKA_APP_TOPIC}
    output.dir: ${?KAFKA_CONSUMER_OUTPUT_DIR}
    # Poll for 10 seconds each time.
    poll.duration: 10
    poll.duration: ${?KAFKA_APP_POLL_DURATION}
    # This one is measured in milliseconds.
    wait.duration: 20000
    wait.duration: ${?KAFKA_APP_WAIT_DURATION}
    # This one is measured in seconds.
    close.duration: 10
    close.duration: ${?KAFKA_APP_CLOSE_DURATION}
    interactive: true
    interactive: ${?KAFKA_APP_INTERACTIVE}
  }
  consumer {
    application.id: eidos
    group.id: eidos
    poll.timeout.millis: 2000
    key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    bootstrap.servers: "localhost:9093"
    bootstrap.servers: ${?KAFKA_CONSUMER_BOOTSTRAP_SERVERS}

    # These properties will ensure that your consumer always starts from the beginning and drains the topic.
    auto.offset.reset: earliest
    auto.offset.reset: ${?KAFKA_CONSUMER_AUTO_OFFSET_RESET}
    enable.auto.commit: true
    enable.auto.commit: ${?KAFKA_CONSUMER_ENABLE_AUTO_COMMIT}

    sasl.jaas.config: ${?KAFKA_CONSUMER_SASL_JAAS_CONFIG}
    sasl.mechanism: PLAIN
    # security.protocol: PLAINTEXT
    security.protocol: SASL_SSL
    security.protocol: ${?KAFKA_CONSUMER_SECURITY_PROTOCOL}
  }
}
